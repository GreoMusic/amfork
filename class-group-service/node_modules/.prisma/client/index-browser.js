
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  subject: 'subject',
  grade: 'grade',
  section: 'section',
  academicYear: 'academicYear',
  semester: 'semester',
  isActive: 'isActive',
  maxStudents: 'maxStudents',
  joinCode: 'joinCode',
  joinCodeExpiresAt: 'joinCodeExpiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teacherId: 'teacherId'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  maxMembers: 'maxMembers',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  classId: 'classId'
};

exports.Prisma.GroupMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  isActive: 'isActive',
  groupId: 'groupId',
  studentId: 'studentId'
};

exports.Prisma.ClassEnrollmentScalarFieldEnum = {
  id: 'id',
  status: 'status',
  enrolledAt: 'enrolledAt',
  leftAt: 'leftAt',
  grade: 'grade',
  notes: 'notes',
  classId: 'classId',
  studentId: 'studentId'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  instructions: 'instructions',
  dueDate: 'dueDate',
  maxScore: 'maxScore',
  weight: 'weight',
  isGroup: 'isGroup',
  allowLate: 'allowLate',
  latePenalty: 'latePenalty',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  classId: 'classId'
};

exports.Prisma.AssignmentSubmissionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  fileUrl: 'fileUrl',
  submittedAt: 'submittedAt',
  score: 'score',
  feedback: 'feedback',
  isLate: 'isLate',
  status: 'status',
  assignmentId: 'assignmentId',
  studentId: 'studentId'
};

exports.Prisma.GroupAssignmentScalarFieldEnum = {
  id: 'id',
  assignedAt: 'assignedAt',
  dueDate: 'dueDate',
  status: 'status',
  groupId: 'groupId',
  assignmentId: 'assignmentId'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  priority: 'priority',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  classId: 'classId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ClassOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  subject: 'subject',
  grade: 'grade',
  section: 'section',
  academicYear: 'academicYear',
  semester: 'semester',
  joinCode: 'joinCode',
  teacherId: 'teacherId'
};

exports.Prisma.GroupOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  classId: 'classId'
};

exports.Prisma.GroupMemberOrderByRelevanceFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  studentId: 'studentId'
};

exports.Prisma.ClassEnrollmentOrderByRelevanceFieldEnum = {
  id: 'id',
  grade: 'grade',
  notes: 'notes',
  classId: 'classId',
  studentId: 'studentId'
};

exports.Prisma.AssignmentOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  instructions: 'instructions',
  classId: 'classId'
};

exports.Prisma.AssignmentSubmissionOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  fileUrl: 'fileUrl',
  feedback: 'feedback',
  assignmentId: 'assignmentId',
  studentId: 'studentId'
};

exports.Prisma.GroupAssignmentOrderByRelevanceFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  assignmentId: 'assignmentId'
};

exports.Prisma.AnnouncementOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  classId: 'classId'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName'
};
exports.GroupRole = exports.$Enums.GroupRole = {
  LEADER: 'LEADER',
  MEMBER: 'MEMBER'
};

exports.EnrollmentStatus = exports.$Enums.EnrollmentStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  GRADUATED: 'GRADUATED'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  GRADED: 'GRADED',
  LATE: 'LATE',
  OVERDUE: 'OVERDUE'
};

exports.GroupAssignmentStatus = exports.$Enums.GroupAssignmentStatus = {
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  OVERDUE: 'OVERDUE'
};

exports.AnnouncementPriority = exports.$Enums.AnnouncementPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.UserRole = exports.$Enums.UserRole = {
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT',
  ADMIN: 'ADMIN'
};

exports.Prisma.ModelName = {
  Class: 'Class',
  Group: 'Group',
  GroupMember: 'GroupMember',
  ClassEnrollment: 'ClassEnrollment',
  Assignment: 'Assignment',
  AssignmentSubmission: 'AssignmentSubmission',
  GroupAssignment: 'GroupAssignment',
  Announcement: 'Announcement',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
